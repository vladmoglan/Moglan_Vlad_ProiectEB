// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moglan_Vlad_ProiectEB.Data;

namespace Moglan_Vlad_ProiectEB.Migrations
{
    [DbContext(typeof(CarServiceContext))]
    partial class CarServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.ProvidedService", b =>
                {
                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("ServiceID", "LocationID");

                    b.HasIndex("LocationID");

                    b.ToTable("ProvidedService");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Appointment", b =>
                {
                    b.HasOne("Moglan_Vlad_ProiectEB.Models.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moglan_Vlad_ProiectEB.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.ProvidedService", b =>
                {
                    b.HasOne("Moglan_Vlad_ProiectEB.Models.Location", "Location")
                        .WithMany("ProvidedService")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moglan_Vlad_ProiectEB.Models.Service", "Service")
                        .WithMany("ProvidedService")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Client", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Location", b =>
                {
                    b.Navigation("ProvidedService");
                });

            modelBuilder.Entity("Moglan_Vlad_ProiectEB.Models.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ProvidedService");
                });
#pragma warning restore 612, 618
        }
    }
}
